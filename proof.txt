1) Dowód na to, że algorytm zakończy się w skończonej liczbie kroków:

    Pętle bazujące na stałych FOV wykonają się dokładnie 2*FOV_WIDTH i odpowiednio 2*FOV_HEIGHT razy.
    FOV_HEIGHT oraz FOV_WIDTH to stałe zdefiniowane w kodzie, więc będą miały skończoną wartość.
    Oznacza to że pętle bazujące na tych zmiennych również będą miały skończoną liczbę obiegów. 

    Użytkownik w pliku wprowadza punkty trójkąta.
    Trójkąt jest dodawany do listy jeden po drugim.
    Użytkownik nie może podać nieskończenie długiego pliku, więc lista trójkątów jest skończona.
    Pętla sprawdzająca wszystkie trójkąty jest więc również skończona i wykona się w najgorszym przypadku tyle razy, ile trójkątów zostało podanych w pliku.

    Podczas dodawania trójkątów do listy ustalana jest najdalsza współrzędna z, na jaką napotkał program przy wczytywaniu punktów.
    Użytkownik musi podać w pliku skończoną wartość współrzędnej z za każdym razem.
    Wartość największej współrzędnej z jest więc skończona.
    Wiadomo więc, że pętla zaczynająca od 0 i kończąca w najgorszym przypadku na współrzędnej z również jest skończona.
    Jeżeli największe z okaże się ujemne, to pętla nie wykona się wcale.

    Wszystkie pętle użyte w algorytmie są skończone i bazują na skończonych danych. Oznacza to więc, że algorytm zawsze zakończy swoje działanie dla takich danych.

2) Dwód na to, że algorytm daje poprawne wyniki dla poprawnych danych
    Algorytm sprawdza wszystkie możliwe punkty w polu widzenia użytkownika. 
    Dla każdej pary (x,y) w polu widzenia tworzy punkt (x,y,z), gdzie z to głebokość od 0 do największej znalezionej współrzędnej z.
    Dla każdego takiego utworzonego punktu, algorytm wybiera po kolei każdy z trójkątów z listy.
    Dla każdego takiego trójkąta i punktu, algorytm sprawdza przy pomocy "testu kątów", czy dany punkt znajduje się w danym trójkącie.
    "Test kątów" polega na sprawdzeniu, czy suma kątów wektorów między danym punktem a wierzchołkami danego trójkąta jest równa 2*PI (margines błędu = 0.1).
    Jeżeli powiedzie się test kątów, algorytm dodaje 1 do obecnej wartości widzialnego pola danego trójkąta i wybiera nową parę (x,y).
    Jeżeli test się nie powiedzie, to algorytm wybiera następny trójkąt z listy.
    Jeżeli dla żadengo z nie ma takiej pary (x,y,z), że jest ona w którymkolwiek z trójkątów, algorytm przechodzi do następnej pary (x,y) i nie dodaje do żadnego z widocznych pól trójkątów.

    Na tej podstawie można uznać, że żaden z trójkątów nie zostanie pominięty oraz że każdy punkt w polu widzenia zostanie sprawdzony. 
    Zostanie również uwzględniona głębokość danego punktu, a punkty za tym pierwszym ze znalezionym najmniejszym z zostaną pominięte.
    Dowodzi to, że algorytm da poprawny wynik.